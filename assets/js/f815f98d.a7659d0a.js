"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[72],{234:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Forms/DataSource/DataSource","title":"DataSource","description":"DataSource defines the origin of data that powers your forms. It allows you to connect forms to different sources such as APIs, queries, collections, or connectors. Configuring a proper DataSource is essential for displaying dynamic and live data on the output page.","source":"@site/docs/Forms/DataSource/DataSource.md","sourceDirName":"Forms/DataSource","slug":"/Forms/DataSource/","permalink":"/Apps4xDocs-Docusaurus/docs/Forms/DataSource/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Forms/DataSource/DataSource.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/Apps4xDocs-Docusaurus/docs/Forms/Configuration/"},"next":{"title":"Sorting","permalink":"/Apps4xDocs-Docusaurus/docs/Forms/Sorting/"}}');var t=s(4848),i=s(8453);const o={},c="DataSource",l={},a=[{value:"Supported DataSource Types",id:"supported-datasource-types",level:2},{value:"DataSource Setup",id:"datasource-setup",level:2},{value:"Setup Configurations",id:"setup-configurations",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"datasource",children:"DataSource"})}),"\n",(0,t.jsx)(n.p,{children:"DataSource defines the origin of data that powers your forms. It allows you to connect forms to different sources such as APIs, queries, collections, or connectors. Configuring a proper DataSource is essential for displaying dynamic and live data on the output page."}),"\n",(0,t.jsx)(n.h2,{id:"supported-datasource-types",children:"Supported DataSource Types"}),"\n",(0,t.jsx)(n.p,{children:"Apps4x supports various DataSource types to suit different data integration needs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"RestApi"}),"\n",(0,t.jsx)(n.li,{children:"Query"}),"\n",(0,t.jsx)(n.li,{children:"Collection"}),"\n",(0,t.jsx)(n.li,{children:"Entity"}),"\n",(0,t.jsx)(n.li,{children:"Rest API Connector"}),"\n",(0,t.jsx)(n.li,{children:"SQL Connector"}),"\n",(0,t.jsx)(n.li,{children:"Swagger Connector"}),"\n",(0,t.jsx)(n.li,{children:"Logic"}),"\n",(0,t.jsx)(n.li,{children:"Default"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"RestApi"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connect directly to REST APIs to fetch and display external data."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Query"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use a custom query to retrieve and manipulate data before showing it in the form."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Collection"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Bind the form to an existing Collection from the app's data model."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Entity"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Directly use an Entity within a Collection as the data source."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Rest API Connector"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use a pre-configured REST API Connector created in the App Studio."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"SQL Connector"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fetch data from SQL databases using a SQL Connector."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Swagger Connector"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Integrate with APIs that expose Swagger documentation for easy field mapping."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Logic"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use business logic or predefined scripts to fetch and control data presentation."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Default"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A fallback data source used when no specific configuration is provided."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"datasource-setup",children:"DataSource Setup"}),"\n",(0,t.jsx)(n.p,{children:"In Apps4x, the DataSource Setup allows you to configure how data is fetched, filtered, and transformed before it is displayed in a form. This configuration is applicable to all DataSource types."}),"\n",(0,t.jsx)(n.h3,{id:"setup-configurations",children:"Setup Configurations"}),"\n",(0,t.jsx)(n.p,{children:"The setup consists of four key tabs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configure"}),"\n",(0,t.jsx)(n.li,{children:"Condition"}),"\n",(0,t.jsx)(n.li,{children:"Transform"}),"\n",(0,t.jsx)(n.li,{children:"Response"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Configure"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Define the Query list and Parameters required for fetching data."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"This is where you set the main structure and entry point for data retrieval."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Condition"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Add logical conditions to determine when and how the data should be fetched."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The data will be retrieved only if the specified condition is met."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Transform"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Use the Transform option to map or extract a specific part of the response."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"This ensures that only the relevant data path is used in the form, keeping the response clean and structured."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"4. Response"})}),"\n",(0,t.jsx)(n.p,{children:"Manage how the response is handled and shown to the user:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Success Format"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Defines the condition under which the API call is considered successful. If false, it is treated as an error."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Success Message"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Message shown when the Success Format condition evaluates to true."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Error Message"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Message shown when the Success Format condition evaluates to false."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Response Data Filter"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Apply a filter to the returned data. Only records that match the condition will be shown."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example Format:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"{{age}}@@Equals@@20"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This filters the response to include only records where the age field equals 20."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This is the formate you have use for the condition ",(0,t.jsx)(n.code,{children:"{{age}}@@Equals@@20"})," you have to separate by @@ symbol."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: Use @@ as the separator between the field, operator, and value."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);